package Blatt01.Aufgabe03;

import org.junit.jupiter.api.Test;
import java.awt.*;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class for GameOfLife.
 * ## Note: All Documentation for this Test Class and its methods was generated by AI (AutoComplete, GitHub Copilot). ##
 */

public class GameOfLifeTest {

    /**
     * Test the GameOfLife constructor.
     */
    @Test
    public void testGameOfLifeConstructor() {
        GameOfLife gameOfLife = new GameOfLife(3, 5);
        assertEquals(3, gameOfLife.getLength());
        assertEquals(5, gameOfLife.getHeight());
        assertEquals(1, gameOfLife.getGeneration());
        assertNotEquals(null, gameOfLife.getGrid());
    }

    /**
     * Test creating a grid with negative dimensions.
     */
    @Test
    public void testCreateGridNegativeDimensions() {
        assertThrows(NegativeArraySizeException.class, () -> {
            GameOfLife gameOfLife = new GameOfLife(-1, 5);
        });}

    /**
     * Test creating a grid with zero dimensions.
     */
    @Test
    public void testCreateGridWithZeroSize() {
        assertThrows(IllegalArgumentException.class, () -> {
            GameOfLife gameOfLife = new GameOfLife(0, 0);
        });}

    /**
     * Test setting a cell to alive.
     */
    @Test
    public void testSetCellAlive() {
        GameOfLife gameOfLife = new GameOfLife(3, 5);
        Point p = new Point(1, 1);
        gameOfLife.setAlive(p);
        assertTrue(gameOfLife.getGrid()[1][1]);
    }

    /**
     * Test setting a cell to alive that is out of bounds.
     */
    @Test
    public void testSetCellAliveOutOfBounds() {
        GameOfLife gameOfLife = new GameOfLife(1, 1);
        Point p = new Point(3, 3);
        assertThrows(IndexOutOfBoundsException.class, () -> {
            gameOfLife.setAlive(p);
        });
    }

    /**
     * Test setting a cell to dead.
     */
    @Test
    public void testSetCellDead() {
        GameOfLife gameOfLife = new GameOfLife(3, 5);
        Point p = new Point(1, 1);
        gameOfLife.setAlive(p);
        assertTrue(gameOfLife.getGrid()[1][1]);
    }

    /**
     * Test setting a cell to dead that is out of bounds.
     */
    @Test
    public void testSetCellDeadOutOfBounds() {
        GameOfLife gameOfLife = new GameOfLife(1, 1);
        Point p = new Point(3, 3);
        assertThrows(IndexOutOfBoundsException.class, () -> {
            gameOfLife.setDead(p);
        });
    }

    /**
     * Test checking if a cell is alive.
     */
    @Test
    public void testIsAlive() {
        GameOfLife gameOfLife = new GameOfLife(3, 5);
        Point p = new Point(1, 1);
        gameOfLife.setAlive(p);
        assertTrue(gameOfLife.isAlive(p));
    }

    /**
     * Test getting all neighbors of a cell.
     */
    @Test
    public void testGetNeighbors() {
        GameOfLife gameOfLife = new GameOfLife(3, 3);
        Point p = new Point(1, 1);
        List<Point> neighbors = gameOfLife.getNeighbours(p);
        List<Point> actualNeighbors = List.of(
                new Point(0, 2), new Point(1, 2), new Point(2, 2),
                new Point(0, 1),                        new Point(2, 1),
                new Point(0, 0), new Point(1, 0), new Point(2, 0)
        );
        assertArrayEquals(neighbors.toArray(), actualNeighbors.toArray());
    }

    /**
     * Test checking if a point is part of the grid.
     */
    @Test
    public void testIsPartOfGrid() {
        GameOfLife gameOfLife = new GameOfLife(3, 3);
        Point insidePoint = new Point(1, 1);
        Point outsidePoint = new Point(5, 5);
        assertTrue(gameOfLife.isPartOfGrid(insidePoint));
        assertFalse(gameOfLife.isPartOfGrid(outsidePoint));
    }

    /**
     * Test the underpopulation rule: Any live cell with fewer than two live neighbours dies. This rule is checked
     * during the step() function.
     */
    @Test
    public void testUnderpopulationRule() {
        GameOfLife gameOfLife = new GameOfLife(3, 3);
        gameOfLife.setAlive(new Point(1, 1));
        gameOfLife.step();
        assertFalse(gameOfLife.isAlive(new Point(1, 1)));
    }

    /**
     * Test the overpopulation rule: Any live cell with more than three live neighbours dies. This rule is checked
     * during the step() function.
     */
    @Test
    public void testOverpopulationRule() {
        GameOfLife gameOfLife = new GameOfLife(3, 3);

        gameOfLife.setAlive(new Point(1, 1));

        gameOfLife.setAlive(new Point(0, 0));
        gameOfLife.setAlive(new Point(0, 1));
        gameOfLife.setAlive(new Point(0, 2));
        gameOfLife.setAlive(new Point(1, 0));

        gameOfLife.step();
        assertFalse(gameOfLife.isAlive(new Point(1, 1)));
    }

    /**
     * Test the stability rule: Any live cell with two or three live neighbours lives on to the next generation. This rule is checked
     * during the step() function.
     */
    @Test
    public void testStabilityRule() {
        GameOfLife gameOfLife = new GameOfLife(4, 4);

        gameOfLife.setAlive(new Point(1, 1));
        gameOfLife.setAlive(new Point(1, 2));
        gameOfLife.setAlive(new Point(2, 1));
        gameOfLife.setAlive(new Point(2, 2));

        gameOfLife.step();

        assertTrue(gameOfLife.isAlive(new Point(1, 1)));
        assertTrue(gameOfLife.isAlive(new Point(1, 2)));
        assertTrue(gameOfLife.isAlive(new Point(2, 1)));
        assertTrue(gameOfLife.isAlive(new Point(2, 2)));
    }

    /**
     * Test the birth rule: Any dead cell with exactly three live neighbours becomes a live cell. This rule is checked
     * during the step() function.
     */
    @Test
    public void testBirthRule() {
        GameOfLife gameOfLife = new GameOfLife(3, 3);

        gameOfLife.setAlive(new Point(0, 1));
        gameOfLife.setAlive(new Point(1, 0));
        gameOfLife.setAlive(new Point(1, 2));

        gameOfLife.step();
        assertTrue(gameOfLife.isAlive(new Point(1, 1)));
    }

    /**
     * Test getting the number of alive neighbours of a cell.
     */
    @Test
    public void testGetNumberNeighboursAlive() {
        GameOfLife gameOfLife = new GameOfLife(3, 3);

        gameOfLife.setAlive(new Point(0, 1));
        gameOfLife.setAlive(new Point(1, 0));
        gameOfLife.setAlive(new Point(1, 2));

        int aliveNeighbors = gameOfLife.getNumberNeighboursAlive(gameOfLife.getNeighbours(new Point(1, 1)));
        assertEquals(3, aliveNeighbors);
    }

    /**
     * Test getting the current generation.
     */
    @Test
    public void getGeneration(){
        GameOfLife gameOfLife = new GameOfLife(3, 3);
        gameOfLife.step();
        gameOfLife.step();
        assertEquals(3, gameOfLife.getGeneration());
    }
}

