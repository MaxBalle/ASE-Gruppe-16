package Blatt01.Aufgabe03;

import org.junit.jupiter.api.Test;
import java.awt.*;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class for GameOfLife.
 * ## Note: All Documentation for this Test Class and its methods was generated by AI (AutoComplete, GitHub Copilot). ##
 */

public class GameOfLifeTest {

    /**
     * Test the GameOfLife constructor.
     */
    @Test
    public void testGameOfLifeConstructor() {
        GameOfLife gameOfLife = new GameOfLife(3, 5);
        assertEquals(3, gameOfLife.getWidth());
        assertEquals(5, gameOfLife.getHeight());
        assertEquals(1, gameOfLife.getGeneration());
        assertNotEquals(null, gameOfLife.getGrid());
    }

    /**
     * Test creating a grid with negative or zero dimensions.
     */
    @Test
    public void testCreateGridNegativeOrZeroDimensions() {
        assertThrows(IllegalArgumentException.class, () -> {
            GameOfLife gameOfLife = new GameOfLife(5, 0);
        });
        assertThrows(IllegalArgumentException.class, () -> {
            GameOfLife gameOfLife = new GameOfLife(-6, 12);
        });
    }

    /**
     * Test setting a cell to alive.
     */
    @Test
    public void testSetCellAlive() {
        GameOfLife gameOfLife = new GameOfLife(3, 5);
        gameOfLife.setAlive(1,1);
        assertTrue(gameOfLife.getGrid()[1][1]);
    }

    /**
     * Test setting a cell to dead.
     */
    @Test
    public void testSetCellDead() {
        GameOfLife gameOfLife = new GameOfLife(3, 5);
        gameOfLife.setDead(1,1);
        assertFalse(gameOfLife.getGrid()[1][1]);
    }

    /**
     * Test setting a cell to alive that is out of bounds.
     */
    @Test
    public void testSetCellAliveOutOfBounds() {
        GameOfLife gameOfLife = new GameOfLife(1, 1);
        assertThrows(IllegalArgumentException.class, () -> {
            gameOfLife.setAlive(3,3);
        });
    }

    /**
     * Test setting a cell to dead that is out of bounds.
     */
    @Test
    public void testSetCellDeadOutOfBounds() {
        GameOfLife gameOfLife = new GameOfLife(1, 1);
        assertThrows(IllegalArgumentException.class, () -> {
            gameOfLife.setDead(3,3);
        });
    }

    /**
     * Test checking if a cell is alive that is out of bounds. Edge behavior is to return false.
     */
    @Test
    public void testIsAliveOutOfBounds() {
        GameOfLife gameOfLife = new GameOfLife(2, 2);
        assertFalse(gameOfLife.isAlive(5, 5));
    }

    /**
     * Test checking if a cell is alive.
     */
    @Test
    public void testIsAlive() {
        GameOfLife gameOfLife = new GameOfLife(3, 5);
        gameOfLife.setAlive(1,1);
        assertTrue(gameOfLife.isAlive(1,1));
    }

    /**
     * Test checking if a point is part of the grid.
     */
    @Test
    public void testIsPartOfGrid() {
        GameOfLife gameOfLife = new GameOfLife(3, 3);

        assertTrue(gameOfLife.isPartOfGrid(1,1));
        assertFalse(gameOfLife.isPartOfGrid(5,5));

        // Test edges
        assertTrue(gameOfLife.isPartOfGrid(0,0));
        assertTrue(gameOfLife.isPartOfGrid(2,2));
        assertTrue(gameOfLife.isPartOfGrid(2,0));
        assertTrue(gameOfLife.isPartOfGrid(0,2));
    }

    /**
     * Test the underpopulation rule: Any live cell with fewer than two live neighbours dies. This rule is checked
     * during the step() function.
     */
    @Test
    public void testUnderpopulationRule() {
        GameOfLife gameOfLife = new GameOfLife(3, 3);
        gameOfLife.setAlive(1, 1);
        gameOfLife.step();
        assertFalse(gameOfLife.isAlive(1, 1));
    }

    /**
     * Test the overpopulation rule: Any live cell with more than three live neighbours dies. This rule is checked
     * during the step() function.
     */
    @Test
    public void testOverpopulationRule() {
        GameOfLife gameOfLife = new GameOfLife(3, 3);

        gameOfLife.setAlive(1, 1);

        gameOfLife.setAlive(0, 0);
        gameOfLife.setAlive(0, 1);
        gameOfLife.setAlive(0, 2);
        gameOfLife.setAlive(1, 0);

        gameOfLife.step();
        assertFalse(gameOfLife.isAlive(1, 1));
    }

    /**
     * Test the stability rule: Any live cell with two or three live neighbours lives on to the next generation. This rule is checked
     * during the step() function.
     */
    @Test
    public void testStabilityRule() {
        GameOfLife gameOfLife = new GameOfLife(4, 4);

        gameOfLife.setAlive(1, 1);
        gameOfLife.setAlive(1, 2);
        gameOfLife.setAlive(2, 1);
        gameOfLife.setAlive(2, 2);

        gameOfLife.step();

        assertTrue(gameOfLife.isAlive(1, 1));
        assertTrue(gameOfLife.isAlive(1, 2));
        assertTrue(gameOfLife.isAlive(2, 1));
        assertTrue(gameOfLife.isAlive(2, 2));
    }

    /**
     * Test the birth rule: Any dead cell with exactly three live neighbours becomes a live cell. This rule is checked
     * during the step() function.
     */
    @Test
    public void testBirthRule() {
        GameOfLife gameOfLife = new GameOfLife(3, 3);

        gameOfLife.setAlive(0, 1);
        gameOfLife.setAlive(1, 0);
        gameOfLife.setAlive(1, 2);

        gameOfLife.step();
        assertTrue(gameOfLife.isAlive(1, 1));
    }

    /**
     * Test counting the number of alive neighbours of a cell.
     */
    @Test
    public void testCountNeighboursAlive() {
        GameOfLife gameOfLife = new GameOfLife(3, 3);

        gameOfLife.setAlive(0, 1);
        gameOfLife.setAlive(1, 0);
        gameOfLife.setAlive(1, 2);

        int aliveNeighbors = gameOfLife.countNeighboursAlive(1, 1);
        assertEquals(3, aliveNeighbors);
    }

    /**
     * Test getting the current generation.
     */
    @Test
    public void getGeneration(){
        GameOfLife gameOfLife = new GameOfLife(3, 3);
        gameOfLife.step();
        gameOfLife.step();
        assertEquals(3, gameOfLife.getGeneration());
    }
}

